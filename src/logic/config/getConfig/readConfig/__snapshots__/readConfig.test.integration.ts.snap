// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`readConfig should be able to read the example config provisioned in __test_assets__ 1`] = `
GeneratorConfig {
  "definitions": Array [
    QueryDefinition {
      "name": "selectOne",
      "sql": "select 1",
    },
    ResourceDefinition {
      "name": "communication_channel",
      "sql": "-- ----------------------------------------
-- create communication channel table
-- ----------------------------------------
CREATE TABLE \`communication_channel\` (
  -- meta
  \`id\` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  \`uuid\` VARCHAR(36) NOT NULL,
  \`created_at\` DATETIME DEFAULT CURRENT_TIMESTAMP,

  -- static data
  \`type\` ENUM('APP', 'SMS', 'EMAIL') NOT NULL, -- e.g., \\"how do we send this\\"
  \`address\` VARCHAR(36) NOT NULL, -- e.g., \\"where do we send this\\"

  -- meta meta
  UNIQUE (\`type\`, \`address\`) -- type + address uniquely identify a communication channel
) ENGINE = InnoDB;
",
      "type": "TABLE",
    },
    ResourceDefinition {
      "name": "upsert_user_description",
      "sql": "/*
  this is an example procedure with an example comment at the top, just to prove that we can extrac thte name and type from it
*/
CREATE PROCEDURE upsert_user_description(
  IN in_from_user_id BIGINT,
  IN in_first_name VARCHAR(255),
  IN in_last_name VARCHAR(255),
  IN in_phone_channel_id BIGINT
)
BEGIN
  -- ----------------------------------------
  -- DECLARATIONS
  -- ----------------------------------------
  DECLARE v_data_hash BINARY(20);
  DECLARE v_entity_exists BOOLEAN DEFAULT false;

  -- -----------------------------------------
  -- UPSERT RECORD
  -- -----------------------------------------
  -- calculate the hash
  SET v_data_hash = UNHEX( --  get the binary
    SHA( -- of the hex hash
      CONCAT_WS( -- of a string combining all non-null values
        ':',
        in_from_user_id,
        in_first_name,
        in_last_name,
        in_phone_channel_id
      )
    )
  );

  -- ... do more stuff
END;
",
      "type": "PROCEDURE",
    },
    QueryDefinition {
      "name": "findAllUsersByName",
      "sql": "SELECT * FROM users WHERE name = :name",
    },
  ],
  "dialect": "5.7",
  "language": "mysql",
}
`;
