// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate should be able to read the example config provisioned in __test_assets__ 1`] = `
"// types for table 'communication_channel'
export interface SqlTableCommunicationChannel {
  id: number;
  uuid: string;
  created_at: Date | null;
  type: string;
  address: string;
}

// types for table 'ice_cream'
export interface SqlTableIceCream {
  id: number;
  uuid: string;
  created_at: Date;
  name: string;
  ingredient_ids_hash: Buffer;
}

// types for table 'image'
export interface SqlTableImage {
  id: number;
  uuid: string;
  created_at: Date;
  url: string;
  caption: string | null;
  credit: string | null;
  alt_text: string | null;
}

// types for table 'ingredient'
export interface SqlTableIngredient {
  id: number;
  uuid: string;
  created_at: Date;
  name: string;
  cost: number;
}

// types for table 'user'
export interface SqlTableUser {
  id: number;
  uuid: string;
  created_at: Date | null;
  first_name: string;
  last_name: string;
}

// types for function 'get_from_delimiter_split_string'
export interface SqlFunctionGetFromDelimiterSplitStringInput {
  0: string | null;
  1: string | null;
  2: number | null;
}
export interface SqlFunctionGetFromDelimiterSplitStringInputByName {
  in_array: SqlFunctionGetFromDelimiterSplitStringInput['0'];
  in_delimiter: SqlFunctionGetFromDelimiterSplitStringInput['1'];
  in_index: SqlFunctionGetFromDelimiterSplitStringInput['2'];
}
export type SqlFunctionGetFromDelimiterSplitStringOutput = string;

// types for function 'upsert_image'
export interface SqlFunctionUpsertImageInput {
  0: string | null;
  1: string | null;
  2: string | null;
  3: string | null;
}
export interface SqlFunctionUpsertImageInputByName {
  in_url: SqlFunctionUpsertImageInput['0'];
  in_caption: SqlFunctionUpsertImageInput['1'];
  in_credit: SqlFunctionUpsertImageInput['2'];
  in_alt_text: SqlFunctionUpsertImageInput['3'];
}
export type SqlFunctionUpsertImageOutput = number;

// types for view 'view_user_name'
export interface SqlViewViewUserName {
  id: SqlTableUser['id'];
  first_name: SqlTableUser['first_name'];
  last_name: SqlTableUser['last_name'];
}

// types for query 'find_all_by_name'
export interface SqlQueryFindAllByNameInput {
  firstName: SqlTableUser['first_name'];
}
export interface SqlQueryFindAllByNameOutput {
  id: SqlTableUser['id'];
  first_name: SqlTableUser['first_name'];
}

// types for query 'select_user_name_from_view'
export interface SqlQuerySelectUserNameFromViewInput {
  userId: SqlViewViewUserName['id'];
}
export interface SqlQuerySelectUserNameFromViewOutput {
  first_name: SqlViewViewUserName['first_name'];
  last_name: SqlViewViewUserName['last_name'];
}
"
`;

exports[`generate should be able to read the example config provisioned in __test_assets__ 2`] = `
"import { mysql as prepare } from 'yesql';
import { sql as sqlQueryFindAllByNameSql } from '../../dao/user/findAllByName';
import { sql as sqlQuerySelectUserNameFromViewSql } from '../../others/queryUserNameView';
import {
  SqlQueryFindAllByNameInput,
  SqlQueryFindAllByNameOutput,
  SqlQuerySelectUserNameFromViewInput,
  SqlQuerySelectUserNameFromViewOutput,
} from './types';

// typedefs common to each query function
export type DatabaseExecuteCommand = (args: { sql: string; values: any[] }) => Promise<any[]>;
export type LogMethod = (message: string, metadata: any) => void;

// client method for query 'find_all_by_name'
export const sqlQueryFindAllByName = async ({
  dbExecute,
  logDebug,
  input,
}: {
  dbExecute: DatabaseExecuteCommand;
  logDebug: LogMethod;
  input: SqlQueryFindAllByNameInput;
}): Promise<SqlQueryFindAllByNameOutput[]> => {
  // 1. define the query with yesql
  const { sql: preparedSql, values: preparedValues } = prepare(sqlQueryFindAllByNameSql)(input);

  // 2. log that we're running the request
  logDebug('sqlQueryFindAllByName.input', { input });

  // 3. execute the query
  const [output] = await dbExecute({ sql: preparedSql, values: preparedValues });

  // 4. log that we've executed the request
  logDebug('sqlQueryFindAllByName.output', { output });

  // 5. return the output
  return output;
};

// client method for query 'select_user_name_from_view'
export const sqlQuerySelectUserNameFromView = async ({
  dbExecute,
  logDebug,
  input,
}: {
  dbExecute: DatabaseExecuteCommand;
  logDebug: LogMethod;
  input: SqlQuerySelectUserNameFromViewInput;
}): Promise<SqlQuerySelectUserNameFromViewOutput[]> => {
  // 1. define the query with yesql
  const { sql: preparedSql, values: preparedValues } = prepare(sqlQuerySelectUserNameFromViewSql)(input);

  // 2. log that we're running the request
  logDebug('sqlQuerySelectUserNameFromView.input', { input });

  // 3. execute the query
  const [output] = await dbExecute({ sql: preparedSql, values: preparedValues });

  // 4. log that we've executed the request
  logDebug('sqlQuerySelectUserNameFromView.output', { output });

  // 5. return the output
  return output;
};
"
`;
